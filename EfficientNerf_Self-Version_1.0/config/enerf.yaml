# 系统信息
system:
    # 数据信息
    data:
        # 数据存储的根目录
        root_data: '/home/gaoyu/ICCV2023/dataset'
        # 模型种子数值，影响shuffle等随机操作
        seed: 42
    # 设备信息
    device:
        # 指定是GPU还是CPU，GPU是'cuda'，CPU就是''cpu'，注意引号
        dev: 'cuda'
        # id表示使用哪块GPU, 如果上面的dev是 'cpu'，则该项无效，注意引号
        # 如果是分布式训练，该id表示从哪块GPU开始线程
        # 例如，分布式选择2块，默认是0,1，如果该id设置为2，则使用2,3两块卡
        id: '1'
    # 训练参数
    train_params:
        # batch尺寸10240
        batch_size: 8000
        # 学习速率   
        # learning_rate: 0.0005
        learning_rate: 0.001
        # 训练轮数
        train_epoch: 64
        # 权重衰减系数
        weight_decay: 0.0004
    # 权重参数的默认载入路径
    weights_params:
        root_weights: './weights'
    # 测试参数
    test_params:
        # batch尺寸
        batch_size: 40000
        # nerf网络权重文件名称
        nerf_model_name: '/home/gaoyu/CVPR2023_No_Transformer/weights/train/E-NeRF-all-2023-01-31-10-42-05.ckpt'
        # 模型评估阶段batch
        eval_watch_batch: 30
        # 测试是否使用单鱼眼模式
        fisheye_mode: False
        # 单鱼眼模式焦距, 80起步没有四角
        fisheye_focal: 30
    
    # 网络输出结果信息
    out_params:
        root_out: './results'
    # 日志存档参数
    log_params:
        # 存档路径(./results/log)
        logpath: './log'
    # Tensorboard配置
    tensorboard_params:
        # 存档路径
        tb_pth: './tensorboard'
        # 是否删除之前的曲线
        del_mode: False

# 模型拼接信息
unite:
    data:
        # 存放拼接空间模型的根目录
        ckpt_model_data: '/home/gaoyu/CVPR2023/weights/unite'
        # 权重文件名称
        ckpt_name: 'test_volve.ckpt'
        
# 模型信息
model:
    # Efficient NERF的相机信息
    camera:
        # 相机的视场角，角度制
        camera_angle_x: 39.6
    # 前项传播渲染过程的相关参数
    render:
        # 渲染结果的图片尺寸，方形，长宽相同
        img_size: 800
        # 渲染过程中的粗采样数量 128
        N_samples_coarse: 128
        # 渲染过程中的细采样倍数，细采样是粗采样的倍数
        N_samples_fine_times_coarse: 5 
        # 渲染过程中最近渲染距离
        near: 2 
        # 渲染过程中最远渲染距离
        far: 6 
        # 渲染空间网格数量
        # S:128, M:256, L:512, X:1024
        grid_coarse: 384
        # 渲染空间网格数量
        grid_fine_times_coarse: 3
        # 渲染过程中的边界信息，根据物体的位置确定，以物体为中心，正负分布
        # near和far夹逼了物体范围，全局位置比near和far大一点即可
        global_boader_min: -3 
        global_boader_max: 3 
        # 粗采样生成权重的筛选阈值，超过阈值的部分继续进行细渲染
        # weight_t: 0.00005
        weight_t: 0.001
        # 白色背景
        white_back: True
        # 训练阶段初始化sigma查询模块时使用的参数数值
        sigma_init: 30.0
        # 默认sigma，因为这个参数debug一下午，纪念性参数必须有一个yaml文件位置！
        sigma_default: -20.0
        # 前项测试存储路径enerf
        test_enerf_pth: './img_rendered'
        # theta的限定范围
        theta_max: 360
        # phi的限定范围
        phi_max: 90
        # 数据库渲染半径
        radius: 1.2 
        # 将角度的回归映射到0-pose_angle_norm之间,影响回归iou计算速度
        pose_angle_norm: 1
        # coarse调整阶段，这个阶段之前全局sigma均会参加调整，
        # 超过这个阶段，仅会调整有效信息
        warmup_step: 5000
        # coarse阶段sigma数值的调整分度，可以理解为学习速率
        coarse_beta: 0.1
        # chunk尺寸
        chunk: 32768

    # Efficient NeRF中的Nerf网络参数
    nerf:
        # 光线位置信息进nerf渲染编码时生成的额外编码数量
        emb_freqs_xyz: 10
        # 光线方向信息进nerf渲染编码时生成的额外编码数量
        emb_freqs_cls: 6
        
        # NERF本质mlp，例化时的深度
        coarse_MLP_depth: 4
        # 每一层的宽度，理解为MLP每一层神经元数量
        coarse_MLP_width: 128
        # 跳跃链接层
        coarse_MLP_skip: [2]
        
        # 球谐函数阶数
        coarse_MLP_deg: 2  

        # NERF本质mlp，例化时的深度
        fine_MLP_depth: 8
        # 每一层的宽度，理解为MLP每一层神经元数量
        fine_MLP_width: 256
        # 跳跃链接层
        fine_MLP_skip: [4]
        
        # 球谐函数阶数
        fine_MLP_deg: 2

    # Efficient NeRF损失函数
    loss:
        type: 'mse'


